import asyncio

from aiogram import Dispatcher, Bot, F
from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from random import choice


BOT_TOKEN = '7766810555:AAF4amktj49A0HDSVDUMVPd-1vxFpOjnb_g'
GAME_CHOICES = {'–ö–∞–º–µ–Ω—å üëä', '–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è', '–ë—É–º–∞–≥–∞ ‚úã'}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


keyboard_answer: list[list[KeyboardButton]] = [KeyboardButton(text='–î–∞–≤–∞–π!'), KeyboardButton(text='–ù–∏—Ö–∞—á—É(')]

keyboard_game: list[list[KeyboardButton]] =[KeyboardButton(text='–ö–∞–º–µ–Ω—å üëä'), KeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è'), KeyboardButton(text='–ë—É–º–∞–≥–∞ ‚úã')]


builder1 = ReplyKeyboardBuilder()

builder1.row(*keyboard_answer, width=3)

builder2 = ReplyKeyboardBuilder()
builder2.row(*keyboard_game, width=3)


def game_logic(choice_bot, choice_player):
    if choice_bot == choice_player:
        return None
    elif choice_bot == '–ë—É–º–∞–≥–∞ ‚úã':
        if choice_player == '–ö–∞–º–µ–Ω—å üëä':
            return False
        elif choice_player == '–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è':
            return True
    elif choice_bot == '–ù–æ–∂–Ω–∏—Ü—ã ‚úåÔ∏è':
        if choice_player == '–ö–∞–º–µ–Ω—å üëä':
            return True
        elif choice_player == '–ë—É–º–∞–≥–∞ ‚úã':
            return False


@dp.message(CommandStart())
async def process_command_start(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞?',
        reply_markup=builder1.as_markup(resize_keyboard=True))


@dp.message(Command(commands=['help']))
async def process_command_help(message: Message):
    await message.answer(
        text='–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º: '
                '–ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å (¬´–±—É–º–∞–≥–∞ –æ–±—ë—Ä—Ç—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å¬ª). '
                '–ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã (¬´–∫–∞–º–µ–Ω—å –∑–∞—Ç—É–ø–ª—è–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã¬ª). '
                '–ù–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É (¬´–Ω–æ–∂–Ω–∏—Ü—ã —Ä–∞–∑—Ä–µ–∑–∞—é—Ç –±—É–º–∞–≥—É¬ª).\n'
                '–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–æ –º–Ω–æ–π –≤ –∏–≥—Ä—É?',
        reply_markup=builder1.as_markup(resize_keyboart=True),
    )


@dp.message(F.text == '–î–∞–≤–∞–π!')
async def process_command_game(message: Message):
    await message.answer(
        text='–í—ã–±–∏—Ä–∞–π!',
        reply_markup=builder2.as_markup(resize_keyboard=True)
    )


@dp.message(F.text.in_(GAME_CHOICES))
async def process_command_choice(message: Message):
    choice_bot = choice(list(GAME_CHOICES))
    check_result = game_logic(choice_bot, message.text)
    if check_result is None:
        await message.answer(
            text='–£—Ä–∞! –£ –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–∏—á—å—è! '
            '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑!',
            reply_markup=builder2.as_markup(resize_keyboard=True))
    if check_result:
        await message.answer(
            text='–í–∞—É! –¢—ã –≤—ã–∏–≥—Ä–∞–ª! '
            '–ù—É –Ω–∏—á–µ–≥–æ! –£ –º–µ–Ω—è –ø–æ–ª—É—á–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ '
            '–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?',
            reply_markup=builder1.as_markup(resize_keyboard=True))
    else:
        await message.answer(
            text=f'–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª :( '
            f'–Ø –≤—ã–±—Ä–∞–ª {choice_bot}\n'
            f'–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –µ—â—ë —Ä–∞–∑–æ–∫?',
            reply_markup=builder1.as_markup(resize_keyboard=True))


@dp.message(F.text == '–ù–∏—Ö–∞—á—É(')
async def process_command_diss(message: Message):
    await message.answer(
        text='–õ–∞–¥–Ω–æ :(\n–ú–æ–∂–µ—Ç –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ø–æ–∑–∂–µ',
        reply_markup=builder1.as_markup(resize_keyboard=True)
    )


@dp.message()
async def process_command_diss(message: Message):
    await message.answer(
        text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ( '
        '–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º?',
        reply_markup=builder1.as_markup(resize_keyboard=True)
    )


if __name__ == '__main__':
    dp.run_polling(bot)